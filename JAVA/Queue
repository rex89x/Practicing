//abstract queue
public abstract class Queue<T> {
    protected int count;
     
    abstract public void offer(T value);
    abstract public T poll();
    abstract public T peek();
     
    public int size()
    {
        return count;
    }
}



//--------------------------------------------------------------



//Node
public class Node<T>
{
    private Node<T> next;
    private T value;
     
    public Node<T> getNext() 
    { 
        return next; 
    }
     
    void setNext(Node<T> next) 
    { 
        this.next = next;
    }
     
    public T getValue()
    { 
        return value;
    }
     
    void setValue(T value) 
    { 
        this.value = value;
    }
 
    public Node(T value)
    {
        this.value = value;
    }
}



//--------------------------------------------------------------------



//Linked List queue
public class LinkedListQueue<T> extends Queue<T> {
 
    private Node<T> first;
    private Node<T> last;
     
    @Override
    public void offer(T value) {
        // TODO Auto-generated method stub
        Node<T> node = new Node<T>(value);
        if (count == 0)
            first = node;
        else
            last.setNext(node);
        last = node;
        ++count;
    }
 
    @Override
    public T poll() {
        // TODO Auto-generated method stub
        Node<T> node = first;
        first = first.getNext();
        node.setNext(null);
        --count;
        return node.getValue();
    }
 
    @Override
    public T peek() {
        // TODO Auto-generated method stub
        return first.getValue();
    }
 
}




//---------------------------------------------------------------



//array queue
public class ArrayQueue<T> extends Queue<T> {
 
    private int capacity;
    private int first;
    private T[] array;
 
    public ArrayQueue()
    {
        this(10240);
    }
 
    @SuppressWarnings("unchecked")
    public ArrayQueue(int capacity)
    {
        this.capacity = capacity;
        array = (T[]) new Object[capacity];
    }
     
    @SuppressWarnings("unchecked")
    @Override
    public void offer(T value) {
        // TODO Auto-generated method stub
 
        if (count == array.length)
        {
            T[] newArray = (T[]) new Object[array.length + capacity];
            System.arraycopy(array, first, newArray, 0, array.length - first);
            System.arraycopy(array, 0, newArray, array.length - first, first);
            array = newArray;
            first = 0;
        }
        array[(first + count) % array.length] = value;
        ++count;
    }
 
    @Override
    public T poll() {
        // TODO Auto-generated method stub
        T value = array[first];
        array[first] = null;
        first = (first + 1) % array.length;
        --count;
        return value;
    }
 
    @Override
    public T peek() {
        // TODO Auto-generated method stub
        return array[first];
    }
 
}
