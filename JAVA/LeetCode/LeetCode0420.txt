//Next Permutation
class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while(i>=0 && nums[i]>=nums[i+1]) i--;
        for(int j = nums.length-1; j > i && i>=0;j--){
            if(nums[i]<nums[j]){ 
            swap(nums,i,j);
            break;
            }
        }
        reverse(nums,i+1,nums.length -1);
    }
    private void reverse(int[] nums, int start,int j){
        while(start<j) swap(nums,start++,j--);
    } 
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

//Longest Valid Parentheses
class Solution {
    public int longestValidParentheses(String s) {
        int answer = 0;
        int openBrackets = 0, closeBrackets = 0;
        
        for (char c : s.toCharArray()){
            if(c == '('){
                ++openBrackets;
            }else{
                ++closeBrackets;
            }
            
            if (closeBrackets > openBrackets){
                openBrackets = closeBrackets = 0;
            }else if(openBrackets == closeBrackets){
                answer = Math.max(answer, openBrackets + closeBrackets);
            }
        }
            
            openBrackets = closeBrackets = 0;
            
            for(int i = s.length() - 1; i>=0; i--){
                if(s.charAt(i)=='('){
                    ++openBrackets;
                }else{
                    ++closeBrackets;
                }
                
                if(openBrackets > closeBrackets){
                    openBrackets = closeBrackets = 0;
                }else if(openBrackets == closeBrackets){
                    answer = Math.max(answer, openBrackets + closeBrackets);
                }
            }
                
                return answer;
            
    }
}