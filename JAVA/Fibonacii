//數學法
public class Mathematics {
    static double A = Math.sqrt(5) / 5;
    static double B = (1 + Math.sqrt(5)) / 2;
    static double C = (1 - Math.sqrt(5)) / 2;
    public static long Fibonacci(int n)
    {
        return (long)(A * (Math.pow(B, n) - Math.pow(C, n)));
    }
}


//跌代法
public class Iterative {
    public static long Fibonacci(int n)
    {
        long v1 = 0;
        long v2 = 1;
        long result = n;
        for (int i = 2; i <= n; ++i)
        {
            result = v2 + v1;
            v1 = v2;
            v2 = result;
        }
        return result;
    }
}



//Divide and conquer
public class DivideAndConquer {
    public static long Fibonacci(int n)
    {
        if (n == 0)
            return 0;
        if (n == 1)
            return 1;
        return Fibonacci(n - 1) + Fibonacci(n - 2);
    }
}



//遞迴
import java.util.HashMap;
import java.util.Map;
 
public class DynamicProgramming {
    static Map<Integer, Long> map = new HashMap<Integer, Long>() {{ put(0, 0L); put(1, 1L); }};
    public static long Fibonacci(int n)
    {
        if (map.containsKey(n))
            return map.get(n);
        map.put(n, Fibonacci(n - 1) + Fibonacci(n - 2));
        return map.get(n);
    }
}



//迴圈
import java.util.HashMap;
import java.util.Map;
 
 
public class IterativeDynamicProgramming {
    public static long Fibonacci(int n)
    {
        Map<Integer, Long> map = new HashMap<Integer, Long>() {{ put(0, 0L); put(1, 1L); }};
         
        for (int i = 2; i <= n; ++i)
            map.put(i, map.get(i - 1) + map.get(i - 2));
        return map.get(n);
    }
}
